global:
  regions:
    - us-east-1
  #   - us-east-2
  #   - ap-southeast-1

slack:
  # channel_key: channel_id
  channel_key: test_channel_id
  log_channel_key: test_channel_id
  token_secret_key: token
  token_secret_name: justin/slack_token
  token_secret_region: us-east-1
  chat_post_message_endpoint: https://slack.com/api/chat.postMessage
  user_lookup_endpoint: https://slack.com/api/users.lookupByEmail

instances:
  ec2:
    enabled: true
    config:
      exceptions:
      - aws_cleaner/exception
      - aws:autoscaling:groupName
    states:
      running:
        action: "stop"
        default_days: 31
        max_days: 62
        action_tag: aws_cleaner/stop/date
        action_log_tag: aws_cleaner/stop/log
        next_state: "stopped"

        notifications:
          aws_cleaner/stop/notifications/1: 15
          aws_cleaner/stop/notifications/2: 7
          aws_cleaner/stop/notifications/3: 2

      stopped:
        action: "terminate"
        default_days: 31
        max_days: 62
        action_tag: aws_cleaner/terminate/date
        action_log_tag: aws_cleaner/terminate/log
        # next_state: null

        notifications:
          aws_cleaner/terminate/notifications/1: 15
          aws_cleaner/terminate/notifications/2: 7
          aws_cleaner/terminate/notifications/3: 2

  rds:
    enabled: false
    config:
      tags:
        t_standalone_stopped: aws_cleaner/stop/log
      exceptions:
        - aws_cleaner/exception
      filters:
        # describe_db_instances doesn't support filters, so this is simulated
        # semantics are slightly different; this is a full OR match
        # i.e., if an instance has any of these key/value pairs, it matches
        - Name: "tag:divvy_owner"
          Values:
            - jlee@confluent.io
    states:
      # RDS only supports "temporary stop" so running has these conditions:
      # * Not part of a cluster (no DBClusterIdentifier)
      # * DBInstanceStatus: available (no stop log)
      # * No stop log (added when first temporarily stopped)
      "standalone:available":
        action: "stop"
        default_days: 21
        max_days: 62
        action_tag: aws_cleaner/stop/date
        action_log_tag: aws_cleaner/stop/log
        next_state: "standalone:stopped"

        notifications:
          aws_cleaner/stop/notifications/1: 15
          aws_cleaner/stop/notifications/2: 7
          aws_cleaner/stop/notifications/3: 2

      # Conditions
      # * Not part of a cluster (no DBClusterIdentifier)
      # * DBInstanceStatus: stopped, OR DBInstanceStatus: available with presence of stop log
      "standalone:stopped":
        action: "delete"
        default_days: 14
        max_days: 62
        action_tag: aws_cleaner/delete/date
        action_log_tag: aws_cleaner/delete/log
        # next_state: null
        
        notifications:
          aws_cleaner/delete/notifications/1: 15
          aws_cleaner/delete/notifications/2: 7
          aws_cleaner/delete/notifications/3: 2
      
      # Serverless are always part of a cluster

  autoscaling:
    enabled: false
    config:
      exceptions:
        - aws_cleaner/exception
      prefixes:
        managed:
          - eks
        eks:
          - kubernetes.io/cluster
      filters:
        - Name: "tag:divvy_owner"
          Values:
            - jlee@confluent.io
    states:
      "standalone:running":
        action: "scaletozero"
        default_days: 31
        max_days: 62
        action_tag: aws_cleaner/scaletozero/date
        action_log_tag: aws_cleaner/scaletozero/log
        next_state: "standalone:scaledtozero"

        notifications:
          aws_cleaner/scaletozero/notifications/1: 15
          aws_cleaner/scaletozero/notifications/2: 7
          aws_cleaner/scaletozero/notifications/3: 2

      "standalone:scaledtozero":
        action: "delete"
        default_days: 31
        max_days: 62
        action_tag: aws_cleaner/delete/date
        action_log_tag: aws_cleaner/delete/log
        # next_state: null

        notifications:
          aws_cleaner/delete/notifications/1: 15
          aws_cleaner/delete/notifications/2: 7
          aws_cleaner/delete/notifications/3: 2

# Possible tags to identify owner email
email_tags:
  - email
  - owner_email
  - owner
  - divvy_owner
  - divvy_last_modified_by
  - Owner_Email
  - Owner

notify_messages:
  ADD_ACTION_DATE: "[`{region}` / `{type}`] Added {action} date to {state} {type} instance '{name}' [`{id}`], set to *{new_date}* (tag `[{tag}]`)"
  RESET_ACTION_DATE: "[`{region}` / `{type}`] Updating {state} {type} instance '{name}' [`{id}`]: {action} date changed from {old_date} to *{new_date}* (tag `[{tag}]`)"
  RESET_NOTIFICATIONS: "[`{region}` / `{type}`] Resetting notifications for {state} {type} instance '{name}' [`{id}`]: {action} date is set to *{new_date}* (tag `[{tag}]`)"
  COMPLETE_ACTION: "[`{region}` / `{type}`] Completed {action} on {state} {type} instance '{name}' [`{id}`] (tag `[{tag}]`)"
  TRANSITION_ACTION: "[`{region}` / `{type}`] Initial notification: will {action} newly {state} {type} instance '{name}' [`{id}`] on *{new_date}* (tag `[{tag}]`)"
  PAST_BUMP_NOTIFICATION: "[`{region}` / `{type}`] Notification #__N__ for {state} {type} instance '{name}' [`{id}`]: will {action} on *{new_date}* (previously set to *{old_date}*) (tag `[{tag}]`)"
  SEND_NOTIFICATION: "[`{region}` / `{type}`] Notification #__N__ for {state} {type} instance '{name}' [`{id}`]: will {action} on *{new_date}* (tag `[{tag}]`)"
  LOG_NO_NOTIFICATION: "[`{region}` / `{type}`] Will {action} {state} {type} instance '{name}' [`{id}`] on *{new_date}* (tag `[{tag}]`)"
  IGNORE_OTHER_STATES: "[`{region}` / `{type}`] Ignoring {state} {type} instance '{name}' [`{id}`] because its state is {state}"
  # Not currently passing in exception value, because it would require adding a different passed-in parameters to NOTIFY_MESSAGES
  SKIP_EXCEPTION: "[`{region}` / `{type}`] Skipping {state} {type} instance '{name}' [`{id}`] because it has {tag} set to {new_date}"
  # IGNORE_ASG: "Ignoring {type} {name} [`{id}`] because it is in autoscaling group {tag}"
